{
  "version": 3,
  "sources": ["../src/log.ts", "../src/utils/local-storage.ts", "../src/utils/formatters.ts", "../src/utils/color.ts", "../src/utils/autobind.ts", "../src/utils/assert.ts", "../src/utils/hi-res-timestamp.ts", "../src/index.ts"],
  "sourcesContent": ["// probe.gl, MIT license\n\n/* eslint-disable no-console */\nimport {VERSION, isBrowser} from '@probe.gl/env';\nimport {LocalStorage} from './utils/local-storage';\nimport {formatImage, formatTime, leftPad} from './utils/formatters';\nimport {addColor} from './utils/color';\nimport {autobind} from './utils/autobind';\nimport assert from './utils/assert';\nimport {getHiResTimestamp} from './utils/hi-res-timestamp';\n\n/** \"Global\" log configuration settings */\ntype LogConfiguration = {\n  enabled?: boolean;\n  level?: number;\n  [key: string]: unknown;\n};\n\n/** Options when logging a message */\ntype LogOptions = {\n  method?: Function;\n  time?: boolean;\n  total?: number;\n  delta?: number;\n  tag?: string;\n  message?: string;\n  once?: boolean;\n  nothrottle?: boolean;\n  args?: any;\n};\n\ntype LogFunction = () => void;\n\ntype Table = Record<string, any>;\n\n// Instrumentation in other packages may override console methods, so preserve them here\nconst originalConsole = {\n  debug: isBrowser() ? console.debug || console.log : console.log,\n  log: console.log,\n  info: console.info,\n  warn: console.warn,\n  error: console.error\n};\n\nconst DEFAULT_LOG_CONFIGURATION: Required<LogConfiguration> = {\n  enabled: true,\n  level: 0\n};\n\nfunction noop() {} // eslint-disable-line @typescript-eslint/no-empty-function\n\nconst cache = {};\nconst ONCE = {once: true};\n\n/** A console wrapper */\n\nexport class Log {\n  static VERSION = VERSION;\n\n  id: string;\n  VERSION: string = VERSION;\n  _startTs: number = getHiResTimestamp();\n  _deltaTs: number = getHiResTimestamp();\n  _storage: LocalStorage<LogConfiguration>;\n  userData = {};\n\n  // TODO - fix support from throttling groups\n  LOG_THROTTLE_TIMEOUT: number = 0; // Time before throttled messages are logged again\n\n  constructor({id} = {id: ''}) {\n    this.id = id;\n    this.userData = {};\n    this._storage = new LocalStorage<LogConfiguration>(\n      `__probe-${this.id}__`,\n      DEFAULT_LOG_CONFIGURATION\n    );\n\n    this.timeStamp(`${this.id} started`);\n\n    autobind(this);\n    Object.seal(this);\n  }\n\n  set level(newLevel: number) {\n    this.setLevel(newLevel);\n  }\n\n  get level(): number {\n    return this.getLevel();\n  }\n\n  isEnabled(): boolean {\n    return this._storage.config.enabled;\n  }\n\n  getLevel(): number {\n    return this._storage.config.level;\n  }\n\n  /** @return milliseconds, with fractions */\n  getTotal(): number {\n    return Number((getHiResTimestamp() - this._startTs).toPrecision(10));\n  }\n\n  /** @return milliseconds, with fractions */\n  getDelta(): number {\n    return Number((getHiResTimestamp() - this._deltaTs).toPrecision(10));\n  }\n\n  /** @deprecated use logLevel */\n  set priority(newPriority: number) {\n    this.level = newPriority;\n  }\n\n  /** @deprecated use logLevel */\n  get priority(): number {\n    return this.level;\n  }\n\n  /** @deprecated use logLevel */\n  getPriority(): number {\n    return this.level;\n  }\n\n  // Configure\n\n  enable(enabled: boolean = true): this {\n    this._storage.setConfiguration({enabled});\n    return this;\n  }\n\n  setLevel(level: number): this {\n    this._storage.setConfiguration({level});\n    return this;\n  }\n\n  /** return the current status of the setting */\n  get(setting: string): any {\n    return this._storage.config[setting];\n  }\n\n  // update the status of the setting\n  set(setting: string, value: any): void {\n    this._storage.setConfiguration({[setting]: value});\n  }\n\n  /** Logs the current settings as a table */\n  settings(): void {\n    if (console.table) {\n      console.table(this._storage.config);\n    } else {\n      console.log(this._storage.config);\n    }\n  }\n\n  // Unconditional logging\n\n  assert(condition: unknown, message?: string): asserts condition {\n    assert(condition, message);\n  }\n\n  /** Warn, but only once, no console flooding */\n  warn(message: string, ...args: unknown[]): LogFunction;\n  warn(message: string): LogFunction {\n    return this._getLogFunction(0, message, originalConsole.warn, arguments, ONCE);\n  }\n\n  /** Print an error */\n  error(message: string, ...args: unknown[]): LogFunction;\n  error(message: string): LogFunction {\n    return this._getLogFunction(0, message, originalConsole.error, arguments);\n  }\n\n  /** Print a deprecation warning */\n  deprecated(oldUsage: string, newUsage: string): LogFunction {\n    return this.warn(`\\`${oldUsage}\\` is deprecated and will be removed \\\nin a later version. Use \\`${newUsage}\\` instead`);\n  }\n\n  /** Print a removal warning */\n  removed(oldUsage: string, newUsage: string): LogFunction {\n    return this.error(`\\`${oldUsage}\\` has been removed. Use \\`${newUsage}\\` instead`);\n  }\n\n  // Conditional logging\n\n  /** Log to a group */\n  probe(logLevel, message?, ...args: unknown[]): LogFunction;\n  probe(logLevel, message?): LogFunction {\n    return this._getLogFunction(logLevel, message, originalConsole.log, arguments, {\n      time: true,\n      once: true\n    });\n  }\n\n  /** Log a debug message */\n  log(logLevel, message?, ...args: unknown[]): LogFunction;\n  log(logLevel, message?): LogFunction {\n    return this._getLogFunction(logLevel, message, originalConsole.debug, arguments);\n  }\n\n  /** Log a normal message */\n  info(logLevel, message?, ...args: unknown[]): LogFunction;\n  info(logLevel, message?): LogFunction {\n    return this._getLogFunction(logLevel, message, console.info, arguments);\n  }\n\n  /** Log a normal message, but only once, no console flooding */\n  once(logLevel, message?, ...args: unknown[]): LogFunction;\n  once(logLevel, message?) {\n    return this._getLogFunction(\n      logLevel,\n      message,\n      originalConsole.debug || originalConsole.info,\n      arguments,\n      ONCE\n    );\n  }\n\n  /** Logs an object as a table */\n  table(logLevel, table?, columns?): LogFunction {\n    if (table) {\n      return this._getLogFunction(\n        logLevel,\n        table,\n        console.table || noop,\n        (columns && [columns]) as unknown as IArguments,\n        {\n          tag: getTableHeader(table)\n        }\n      );\n    }\n    return noop;\n  }\n\n  /** logs an image under Chrome */\n  image({\n    logLevel,\n    priority,\n    image,\n    message = '',\n    scale = 1\n  }: {\n    logLevel?: number;\n    priority?: number;\n    image: any;\n    message?: string;\n    scale?: number;\n  }): LogFunction {\n    if (!this._shouldLog(logLevel || priority)) {\n      return noop;\n    }\n    return isBrowser()\n      ? logImageInBrowser({image, message, scale})\n      : logImageInNode({image, message, scale});\n  }\n\n  time(logLevel, message) {\n    return this._getLogFunction(logLevel, message, console.time ? console.time : console.info);\n  }\n\n  timeEnd(logLevel, message) {\n    return this._getLogFunction(\n      logLevel,\n      message,\n      console.timeEnd ? console.timeEnd : console.info\n    );\n  }\n\n  timeStamp(logLevel, message?) {\n    return this._getLogFunction(logLevel, message, console.timeStamp || noop);\n  }\n\n  group(logLevel, message, opts = {collapsed: false}) {\n    const options = normalizeArguments({logLevel, message, opts});\n    const {collapsed} = opts;\n    // @ts-expect-error\n    options.method = (collapsed ? console.groupCollapsed : console.group) || console.info;\n\n    return this._getLogFunction(options);\n  }\n\n  groupCollapsed(logLevel, message, opts = {}) {\n    return this.group(logLevel, message, Object.assign({}, opts, {collapsed: true}));\n  }\n\n  groupEnd(logLevel) {\n    return this._getLogFunction(logLevel, '', console.groupEnd || noop);\n  }\n\n  // EXPERIMENTAL\n\n  withGroup(logLevel: number, message: string, func: Function): void {\n    this.group(logLevel, message)();\n\n    try {\n      func();\n    } finally {\n      this.groupEnd(logLevel)();\n    }\n  }\n\n  trace(): void {\n    if (console.trace) {\n      console.trace();\n    }\n  }\n\n  // PRIVATE METHODS\n\n  /** Deduces log level from a variety of arguments */\n  _shouldLog(logLevel: unknown): boolean {\n    return this.isEnabled() && this.getLevel() >= normalizeLogLevel(logLevel);\n  }\n\n  _getLogFunction(\n    logLevel: unknown,\n    message?: unknown,\n    method?: Function,\n    args?: IArguments,\n    opts?: LogOptions\n  ): LogFunction {\n    if (this._shouldLog(logLevel)) {\n      // normalized opts + timings\n      opts = normalizeArguments({logLevel, message, args, opts});\n      method = method || opts.method;\n      assert(method);\n\n      opts.total = this.getTotal();\n      opts.delta = this.getDelta();\n      // reset delta timer\n      this._deltaTs = getHiResTimestamp();\n\n      const tag = opts.tag || opts.message;\n\n      if (opts.once && tag) {\n        if (!cache[tag]) {\n          cache[tag] = getHiResTimestamp();\n        } else {\n          return noop;\n        }\n      }\n\n      // TODO - Make throttling work with groups\n      // if (opts.nothrottle || !throttle(tag, this.LOG_THROTTLE_TIMEOUT)) {\n      //   return noop;\n      // }\n\n      message = decorateMessage(this.id, opts.message, opts);\n\n      // Bind console function so that it can be called after being returned\n      return method.bind(console, message, ...opts.args);\n    }\n    return noop;\n  }\n}\n\n/**\n * Get logLevel from first argument:\n * - log(logLevel, message, args) => logLevel\n * - log(message, args) => 0\n * - log({logLevel, ...}, message, args) => logLevel\n * - log({logLevel, message, args}) => logLevel\n */\nfunction normalizeLogLevel(logLevel: unknown): number {\n  if (!logLevel) {\n    return 0;\n  }\n  let resolvedLevel;\n\n  switch (typeof logLevel) {\n    case 'number':\n      resolvedLevel = logLevel;\n      break;\n\n    case 'object':\n      // Backward compatibility\n      // TODO - deprecate `priority`\n      // @ts-expect-error\n      resolvedLevel = logLevel.logLevel || logLevel.priority || 0;\n      break;\n\n    default:\n      return 0;\n  }\n  // 'log level must be a number'\n  assert(Number.isFinite(resolvedLevel) && resolvedLevel >= 0);\n\n  return resolvedLevel;\n}\n\n/**\n * \"Normalizes\" the various argument patterns into an object with known types\n * - log(logLevel, message, args) => {logLevel, message, args}\n * - log(message, args) => {logLevel: 0, message, args}\n * - log({logLevel, ...}, message, args) => {logLevel, message, args}\n * - log({logLevel, message, args}) => {logLevel, message, args}\n */\nexport function normalizeArguments(opts: {\n  logLevel;\n  message;\n  collapsed?: boolean;\n  args?: IArguments | undefined;\n  opts?;\n}): {\n  logLevel: number;\n  message: string;\n  args: any[];\n} {\n  const {logLevel, message} = opts;\n  opts.logLevel = normalizeLogLevel(logLevel);\n\n  // We use `arguments` instead of rest parameters (...args) because IE\n  // does not support the syntax. Rest parameters is transpiled to code with\n  // perf impact. Doing it here instead avoids constructing args when logging is\n  // disabled.\n  // TODO - remove when/if IE support is dropped\n  const args: any[] = opts.args ? Array.from(opts.args) : [];\n  // args should only contain arguments that appear after `message`\n  // eslint-disable-next-line no-empty\n  while (args.length && args.shift() !== message) {}\n\n  switch (typeof logLevel) {\n    case 'string':\n    case 'function':\n      if (message !== undefined) {\n        args.unshift(message);\n      }\n      opts.message = logLevel;\n      break;\n\n    case 'object':\n      Object.assign(opts, logLevel);\n      break;\n\n    default:\n  }\n\n  // Resolve functions into strings by calling them\n  if (typeof opts.message === 'function') {\n    opts.message = opts.message();\n  }\n  const messageType = typeof opts.message;\n  // 'log message must be a string' or object\n  assert(messageType === 'string' || messageType === 'object');\n\n  // original opts + normalized opts + opts arg + fixed up message\n  return Object.assign(opts, {args}, opts.opts);\n}\n\nfunction decorateMessage(id, message, opts) {\n  if (typeof message === 'string') {\n    const time = opts.time ? leftPad(formatTime(opts.total)) : '';\n    message = opts.time ? `${id}: ${time}  ${message}` : `${id}: ${message}`;\n    message = addColor(message, opts.color, opts.background);\n  }\n  return message;\n}\n\n/** @deprecated Function removed */\nfunction logImageInNode({image, message = '', scale = 1}) {\n  console.warn('removed');\n  return noop;\n}\n\nfunction logImageInBrowser({image, message = '', scale = 1}) {\n  if (typeof image === 'string') {\n    const img = new Image();\n    img.onload = () => {\n      const args = formatImage(img, message, scale);\n      console.log(...args);\n    };\n    img.src = image;\n    return noop;\n  }\n  const element = image.nodeName || '';\n  if (element.toLowerCase() === 'img') {\n    console.log(...formatImage(image, message, scale));\n    return noop;\n  }\n  if (element.toLowerCase() === 'canvas') {\n    const img = new Image();\n    img.onload = () => console.log(...formatImage(img, message, scale));\n    img.src = image.toDataURL();\n    return noop;\n  }\n  return noop;\n}\n\nfunction getTableHeader(table: Table): string {\n  for (const key in table) {\n    for (const title in table[key]) {\n      return title || 'untitled';\n    }\n  }\n  return 'empty';\n}\n", "// probe.gl, MIT license\n\nexport type StorageType = 'sessionStorage' | 'localStorage';\n\nfunction getStorage(type: StorageType): Storage | null {\n  try {\n    const storage: Storage = window[type];\n    const x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return storage;\n  } catch (e) {\n    return null;\n  }\n}\n\n// Store keys in local storage via simple interface\nexport class LocalStorage<Configuration extends {}> {\n  storage: Storage | null;\n  id: string;\n  config: Required<Configuration>;\n\n  constructor(\n    id: string,\n    defaultConfig: Required<Configuration>,\n    type: StorageType = 'sessionStorage'\n  ) {\n    this.storage = getStorage(type);\n    this.id = id;\n    this.config = defaultConfig;\n    this._loadConfiguration();\n  }\n\n  getConfiguration(): Required<Configuration> {\n    return this.config;\n  }\n\n  setConfiguration(configuration: Configuration): void {\n    Object.assign(this.config, configuration);\n    if (this.storage) {\n      const serialized = JSON.stringify(this.config);\n      this.storage.setItem(this.id, serialized);\n    }\n  }\n\n  // Get config from persistent store, if available\n  _loadConfiguration() {\n    let configuration = {};\n    if (this.storage) {\n      const serializedConfiguration = this.storage.getItem(this.id);\n      configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};\n    }\n    Object.assign(this.config, configuration);\n    return this;\n  }\n}\n", "// probe.gl, MIT license\n\nexport type FormatValueOptions = {\n  isInteger?: boolean;\n  maxElts?: number;\n  size?: number;\n};\n\n/**\n * Format time\n */\nexport function formatTime(ms: number): string {\n  let formatted;\n  if (ms < 10) {\n    formatted = `${ms.toFixed(2)}ms`;\n  } else if (ms < 100) {\n    formatted = `${ms.toFixed(1)}ms`;\n  } else if (ms < 1000) {\n    formatted = `${ms.toFixed(0)}ms`;\n  } else {\n    formatted = `${(ms / 1000).toFixed(2)}s`;\n  }\n  return formatted;\n}\n\nexport function leftPad(string: string, length: number = 8): string {\n  const padLength = Math.max(length - string.length, 0);\n  return `${' '.repeat(padLength)}${string}`;\n}\n\nexport function rightPad(string: string, length: number = 8): string {\n  const padLength = Math.max(length - string.length, 0);\n  return `${string}${' '.repeat(padLength)}`;\n}\n\nexport function formatValue(v: unknown, options: FormatValueOptions = {}): string {\n  const EPSILON = 1e-16;\n  const {isInteger = false} = options;\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, options);\n  }\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n  // @ts-expect-error\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n  if (isInteger) {\n    // @ts-expect-error\n    return v.toFixed(0);\n  }\n  // @ts-expect-error\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    // @ts-expect-error\n    return v.toFixed(0);\n  }\n  // @ts-expect-error\n  const string = v.toPrecision(2);\n  const decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}\n\n/** Helper to formatValue */\nfunction formatArrayValue(v: any, options: FormatValueOptions) {\n  const {maxElts = 16, size = 1} = options;\n  let string = '[';\n  for (let i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += `,${i % size === 0 ? ' ' : ''}`;\n    }\n    string += formatValue(v[i], options);\n  }\n  const terminator = v.length > maxElts ? '...' : ']';\n  return `${string}${terminator}`;\n}\n\n/**\n * Log an image to the console (uses browser specific console formatting styles)\n * Inspired by https://github.com/hughsk/console-image (MIT license)\n */\nexport function formatImage(image: any, message: string, scale: number, maxWidth: number = 600) {\n  const imageUrl = image.src.replace(/\\(/g, '%28').replace(/\\)/g, '%29');\n\n  if (image.width > maxWidth) {\n    scale = Math.min(scale, maxWidth / image.width);\n  }\n\n  const width = image.width * scale;\n  const height = image.height * scale;\n\n  const style = [\n    'font-size:1px;',\n    `padding:${Math.floor(height / 2)}px ${Math.floor(width / 2)}px;`,\n    `line-height:${height}px;`,\n    `background:url(${imageUrl});`,\n    `background-size:${width}px ${height}px;`,\n    'color:transparent;'\n  ].join('');\n\n  return [`${message} %c+`, style];\n}\n", "import {isBrowser} from '@probe.gl/env';\n\nexport enum COLOR {\n  BLACK = 30,\n  RED = 31,\n  GREEN = 32,\n  YELLOW = 33,\n  BLUE = 34,\n  MAGENTA = 35,\n  CYAN = 36,\n  WHITE = 37,\n\n  BRIGHT_BLACK = 90,\n  BRIGHT_RED = 91,\n  BRIGHT_GREEN = 92,\n  BRIGHT_YELLOW = 93,\n  BRIGHT_BLUE = 94,\n  BRIGHT_MAGENTA = 95,\n  BRIGHT_CYAN = 96,\n  BRIGHT_WHITE = 97\n}\n\nconst BACKGROUND_INCREMENT = 10;\n\nfunction getColor(color: string | COLOR): number {\n  if (typeof color !== 'string') {\n    return color;\n  }\n  color = color.toUpperCase();\n  return COLOR[color] || COLOR.WHITE;\n}\n\nexport function addColor(\n  string: string,\n  color: string | COLOR,\n  background?: string | COLOR\n): string {\n  if (!isBrowser && typeof string === 'string') {\n    if (color) {\n      const colorCode = getColor(color);\n      string = `\\u001b[${colorCode}m${string}\\u001b[39m`;\n    }\n    if (background) {\n      // background colors values are +10\n      const colorCode = getColor(background);\n      string = `\\u001b[${colorCode + BACKGROUND_INCREMENT}m${string}\\u001b[49m`;\n    }\n  }\n  return string;\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n * Binds the \"this\" argument of all functions on a class instance to the instance\n * @param obj - class instance (typically a react component)\n */\nexport function autobind(obj: object, predefined = ['constructor']): void {\n  const proto = Object.getPrototypeOf(obj);\n  const propNames = Object.getOwnPropertyNames(proto);\n\n  const object = obj as Record<string, unknown>;\n  for (const key of propNames) {\n    const value = object[key];\n    if (typeof value === 'function') {\n      if (!predefined.find(name => key === name)) {\n        object[key] = value.bind(obj);\n      }\n    }\n  }\n}\n", "export default function assert(condition: unknown, message?: string): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n", "// probe.gl, MIT license\n\nimport {window, process, isBrowser} from '@probe.gl/env';\n\n/** Get best timer available. */\nexport function getHiResTimestamp() {\n  let timestamp;\n  if (isBrowser() && window.performance) {\n    timestamp = window?.performance?.now?.();\n  } else if ('hrtime' in process) {\n    // @ts-ignore\n    const timeParts = process?.hrtime?.();\n    timestamp = timeParts[0] * 1000 + timeParts[1] / 1e6;\n  } else {\n    timestamp = Date.now();\n  }\n\n  return timestamp;\n}\n", "import {Log} from './log';\n\n// DEFAULT EXPORT IS A LOG INSTANCE\nexport default new Log({id: '@probe.gl/log'});\n\n// LOGGING\nexport {Log} from './log';\nexport {COLOR} from './utils/color';\n\n// UTILITIES\nexport {addColor} from './utils/color';\nexport {leftPad, rightPad} from './utils/formatters';\nexport {autobind} from './utils/autobind';\nexport {LocalStorage} from './utils/local-storage';\nexport {getHiResTimestamp} from './utils/hi-res-timestamp';\n\nimport './init';\n"],
  "mappings": "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",
  "names": ["import_env", "getStorage", "type", "storage", "window", "x", "setItem", "removeItem", "e", "LocalStorage", "constructor", "id", "defaultConfig", "config", "_loadConfiguration", "getConfiguration", "setConfiguration", "configuration", "Object", "assign", "serialized", "JSON", "stringify", "serializedConfiguration", "getItem", "parse", "formatTime", "ms", "formatted", "toFixed", "leftPad", "string", "length", "padLength", "Math", "max", "repeat", "rightPad", "formatImage", "image", "message", "scale", "maxWidth", "imageUrl", "src", "replace", "width", "Math", "min", "height", "style", "floor", "join", "COLOR", "BACKGROUND_INCREMENT", "getColor", "color", "toUpperCase", "WHITE", "addColor", "string", "background", "isBrowser", "colorCode", "autobind", "obj", "predefined", "proto", "Object", "getPrototypeOf", "propNames", "getOwnPropertyNames", "object", "key", "value", "find", "name", "bind", "condition", "message", "Error", "import_env", "getHiResTimestamp", "timestamp", "isBrowser", "window", "performance", "now", "process", "timeParts", "hrtime", "Date", "originalConsole", "debug", "isBrowser", "console", "log", "info", "warn", "error", "DEFAULT_LOG_CONFIGURATION", "enabled", "level", "noop", "cache", "ONCE", "once", "Log", "constructor", "id", "VERSION", "_startTs", "getHiResTimestamp", "_deltaTs", "_storage", "userData", "LOG_THROTTLE_TIMEOUT", "LocalStorage", "timeStamp", "autobind", "Object", "seal", "newLevel", "setLevel", "getLevel", "isEnabled", "config", "getTotal", "Number", "toPrecision", "getDelta", "priority", "newPriority", "getPriority", "enable", "setConfiguration", "get", "setting", "set", "value", "settings", "table", "assert", "condition", "message", "_getLogFunction", "arguments", "deprecated", "oldUsage", "newUsage", "removed", "probe", "logLevel", "time", "columns", "tag", "getTableHeader", "image", "scale", "_shouldLog", "logImageInBrowser", "logImageInNode", "timeEnd", "group", "opts", "collapsed", "options", "normalizeArguments", "method", "groupCollapsed", "assign", "groupEnd", "withGroup", "func", "trace", "normalizeLogLevel", "args", "total", "delta", "decorateMessage", "bind", "resolvedLevel", "isFinite", "Array", "from", "length", "shift", "undefined", "unshift", "messageType", "leftPad", "formatTime", "addColor", "color", "background", "img", "Image", "onload", "formatImage", "src", "element", "nodeName", "toLowerCase", "toDataURL", "key", "title", "Log", "id"]
}
