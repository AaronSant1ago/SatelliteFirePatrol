{
  "version": 3,
  "sources": ["../src/lib/is-electron.ts", "../src/lib/is-browser.ts", "../src/lib/globals.ts", "../src/utils/globals.ts", "../src/lib/get-browser.ts", "../src/utils/assert.ts"],
  "sourcesContent": ["// based on https://github.com/cheton/is-electron\n// https://github.com/electron/electron/issues/2288\n/* eslint-disable complexity */\nexport default function isElectron(mockUserAgent?: string): boolean {\n  // Renderer process\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.process === 'object' &&\n    // @ts-expect-error\n    window.process.type === 'renderer'\n  ) {\n    return true;\n  }\n  // Main process\n  if (\n    typeof process !== 'undefined' &&\n    typeof process.versions === 'object' &&\n    // eslint-disable-next-line\n    Boolean(process.versions['electron'])\n  ) {\n    return true;\n  }\n  // Detect the user agent when the `nodeIntegration` option is set to true\n  const realUserAgent =\n    typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent;\n  const userAgent = mockUserAgent || realUserAgent;\n  if (userAgent && userAgent.indexOf('Electron') >= 0) {\n    return true;\n  }\n  return false;\n}\n", "// This function is needed in initialization stages,\n// make sure it can be imported in isolation\n\nimport isElectron from './is-electron';\n\nexport default function isBrowser(): boolean {\n  // Check if in browser by duck-typing Node context\n  const isNode =\n    // @ts-expect-error\n    typeof process === 'object' && String(process) === '[object process]' && !process.browser;\n\n  return !isNode || isElectron();\n}\n\n// document does not exist on worker thread\nexport function isBrowserMainThread(): boolean {\n  return isBrowser() && typeof document !== 'undefined';\n}\n", "// Do not name these variables the same as the global objects - will break bundling\nconst global_ = globalThis;\n// eslint-disable-next-line consistent-this\nconst self_ = globalThis.self || globalThis.window || globalThis.global;\nconst window_ = (globalThis.window || globalThis.self || globalThis.global) as unknown as Window;\nconst document_ = globalThis.document || ({} as Document);\nconst process_ = globalThis.process || {};\nconst console_ = globalThis.console;\nconst navigator_ = globalThis.navigator || ({} as Navigator);\n\nexport {\n  global_ as global,\n  self_ as self,\n  window_ as window,\n  document_ as document,\n  process_ as process,\n  console_ as console,\n  navigator_ as navigator\n};\n", "import checkIfBrowser from '../lib/is-browser';\n\nexport {self, window, global, document, process, console} from '../lib/globals';\n\n// Extract injected version from package.json (injected by babel plugin)\n// @ts-expect-error\nexport const VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'untranspiled source';\n\nexport const isBrowser = checkIfBrowser();\n", "// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// This function is needed in initialization stages,\n// make sure it can be imported in isolation\n\nimport isBrowser from './is-browser';\nimport isElectron from './is-electron';\nimport {navigator} from './globals';\n\ndeclare global {\n  var chrome: boolean; // eslint-disable-line no-var\n  var safari: boolean; // eslint-disable-line no-var\n  var mozInnerScreenX: number; // eslint-disable-line no-var\n}\n\nconst window = globalThis;\n\nexport function isMobile(): boolean {\n  return typeof window.orientation !== 'undefined';\n}\n\n// Simple browser detection\n// `mockUserAgent` parameter allows user agent to be overridden for testing\n/* eslint-disable complexity */\nexport default function getBrowser(\n  mockUserAgent?: string\n): 'Node' | 'Electron' | 'Chrome' | 'Firefox' | 'Safari' | 'Edge' | 'IE' | 'Unknown' {\n  if (!mockUserAgent && !isBrowser()) {\n    return 'Node';\n  }\n\n  if (isElectron(mockUserAgent)) {\n    return 'Electron';\n  }\n\n  const userAgent = mockUserAgent || navigator.userAgent || '';\n  // const appVersion = navigator_.appVersion || '';\n\n  // NOTE: Order of tests matter, as many agents list Chrome etc.\n  if (userAgent.indexOf('Edge') > -1) {\n    return 'Edge';\n  }\n  const isMSIE = userAgent.indexOf('MSIE ') !== -1;\n  const isTrident = userAgent.indexOf('Trident/') !== -1;\n  if (isMSIE || isTrident) {\n    return 'IE';\n  }\n  if (window.chrome) {\n    return 'Chrome';\n  }\n  if (window.safari) {\n    return 'Safari';\n  }\n  if (window.mozInnerScreenX) {\n    return 'Firefox';\n  }\n  return 'Unknown';\n}\n", "export default function assert(condition: unknown, message?: string) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGe,SAAf,WAAmCA,eAAiC;AAElE,MACE,OAAOC,WAAW,eAClB,OAAOA,OAAOC,YAAY,YAE1BD,OAAOC,QAAQC,SAAS,YACxB;AACA,WAAO;EACR;AAED,MACE,OAAOD,YAAY,eACnB,OAAOA,QAAQE,aAAa,YAE5BC,QAAQH,QAAQE,SAAS,WAAlB,GACP;AACA,WAAO;EACR;AAED,QAAME,gBACJ,OAAOC,cAAc,YAAY,OAAOA,UAAUC,cAAc,YAAYD,UAAUC;AACxF,QAAMA,YAAYR,iBAAiBM;AACnC,MAAIE,aAAaA,UAAUC,QAAQ,UAAlB,KAAiC,GAAG;AACnD,WAAO;EACR;AACD,SAAO;AACR;;;ACzBc,SAAf,YAA6C;AAE3C,QAAMC,SAEJ,OAAOC,YAAY,YAAYC,OAAOD,OAAD,MAAc,sBAAsB,CAACA,QAAQE;AAEpF,SAAO,CAACH,UAAUI,WAAU;AAC7B;AAGM,SAASC,sBAA+B;AAC7C,SAAOC,UAAS,KAAM,OAAOC,aAAa;AAC3C;;;AChBD,IAAMC,UAAUC;AAEhB,IAAMC,QAAQD,WAAWE,QAAQF,WAAWG,UAAUH,WAAWI;AACjE,IAAMC,UAAWL,WAAWG,UAAUH,WAAWE,QAAQF,WAAWI;AACpE,IAAME,YAAYN,WAAWO,YAAa,CAAA;AAC1C,IAAMC,WAAWR,WAAWS,WAAW,CAAA;AACvC,IAAMC,WAAWV,WAAWW;AAC5B,IAAMC,aAAaZ,WAAWa,aAAc,CAAA;;;ACFrC,IAAMC,UAAU,OAAOC,gBAAgB,cAAcA,cAAc;AAEnE,IAAMC,aAAYC,UAAc;;;ACyBvC,IAAMC,UAASC;AAER,SAASC,WAAoB;AAClC,SAAO,OAAOF,QAAOG,gBAAgB;AACtC;AAKc,SAAf,WACEC,eACmF;AACnF,MAAI,CAACA,iBAAiB,CAACC,UAAS,GAAI;AAClC,WAAO;EACR;AAED,MAAIC,WAAWF,aAAD,GAAiB;AAC7B,WAAO;EACR;AAED,QAAMG,YAAYH,iBAAiBI,WAAUD,aAAa;AAI1D,MAAIA,UAAUE,QAAQ,MAAlB,IAA4B,IAAI;AAClC,WAAO;EACR;AACD,QAAMC,SAASH,UAAUE,QAAQ,OAAlB,MAA+B;AAC9C,QAAME,YAAYJ,UAAUE,QAAQ,UAAlB,MAAkC;AACpD,MAAIC,UAAUC,WAAW;AACvB,WAAO;EACR;AACD,MAAIX,QAAOY,QAAQ;AACjB,WAAO;EACR;AACD,MAAIZ,QAAOa,QAAQ;AACjB,WAAO;EACR;AACD,MAAIb,QAAOc,iBAAiB;AAC1B,WAAO;EACR;AACD,SAAO;AACR;;;AC3Ec,SAAf,OAA+BC,WAAoBC,SAAkB;AACnE,MAAI,CAACD,WAAW;AACd,UAAM,IAAIE,MAAMD,WAAW,kBAArB;EACP;AACF;",
  "names": ["mockUserAgent", "window", "process", "type", "versions", "Boolean", "realUserAgent", "navigator", "userAgent", "indexOf", "isNode", "process", "String", "browser", "isElectron", "isBrowserMainThread", "isBrowser", "document", "global_", "globalThis", "self_", "self", "window", "global", "window_", "document_", "document", "process_", "process", "console_", "console", "navigator_", "navigator", "VERSION", "__VERSION__", "isBrowser", "checkIfBrowser", "window", "globalThis", "isMobile", "orientation", "mockUserAgent", "isBrowser", "isElectron", "userAgent", "navigator", "indexOf", "isMSIE", "isTrident", "chrome", "safari", "mozInnerScreenX", "condition", "message", "Error"]
}
